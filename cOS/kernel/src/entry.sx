#include "linkage.h"

RSETORE_ALL:

    popq        %r15
    popq        %r14
    popq        %r13
    popq        %r12
    popq        %r11
    popq        %r10
    popq        %r9
    popq        %r8

    popq        %rbx
    popq        %rcx
    popq        %rdx
    popq        %rsi
    popq        %rdi
    popq        %rbp
    popq        %rax
    movq        %rax,       %ds
    popq        %rax
    movq        %rax,       %es
    popq        %rax
    addq        $0x10,      %rsp /* jmp func and errcode */
    iretq       /* can switch privilege levels automaticly */

#define GET_CURRENT(reg)	\
    movq    $-32768,    reg ; \
    andq    %rsp,       reg

ret_from_exception:

ENTRY(ret_from_intr)
    jmp         RSETORE_ALL

error_code:
    pushq       %rax
    movq        %es,        %rax
    pushq       %rax
    movq        %ds,        %rax
    pushq       %rax
    xorq        %rax,       %rax

    pushq       %rbp
    pushq       %rdi
    pushq       %rsi
    pushq       %rdx
    pushq       %rcx
    pushq       %rbx
    pushq       %r8
    pushq       %r9
    pushq       %r10
    pushq       %r11
    pushq       %r12
    pushq       %r13
    pushq       %r14
    pushq       %r15

    cld
    /* errcode to rsi */
    movq        ERRCODE(%rsp),      %rsi
    movq        FUNC(%rsp),         %rdx

    /* load kernel data seg */
    movq        $0x10,              %rdi
    movq        %rdi,               %ds
    movq        %rdi,               %es

    /* rsp to rdi */
    /* our error_handler is defined as 
        void (*func)(uint64 rsp, uint64 error_code) */
    movq        %rsp,               %rdi

    callq       *%rdx

    jmp         ret_from_exception

ENTRY(divide_error)
    pushq       $0 /* place holder for errcode */
    pushq       %rax
    leaq        do_divide_error(%rip),  %rax
    xchgq       %rax,                   (%rsp)

ENTRY(debug)
    pushq       $0
    pushq       %rax
    leaq        do_debug(%rip),     %rax
    xchgq       %rax,               (%rsp)
    jmp         error_code

ENTRY(nmi)
    pushq       %rax
    cld
    pushq       %rax

    pushq       %rax
    movq        %es,        %rax
    pushq       %rax
    movq        %ds,        %rax
    pushq       %rax
    xorq        %rax,       %rax

    pushq       %rbp
    pushq       %rdi
    pushq       %rsi
    pushq       %rdx
    pushq       %rcx
    pushq       %rbx
    pushq       %r8
    pushq       %r9
    pushq       %r10
    pushq       %r11
    pushq       %r12
    pushq       %r13
    pushq       %r14
    pushq       %r15

    movq        $0x10,      %rdx
    movq        %rdx,       %ds
    movq        %rdx,       %es

    movq        $0,         %rsi
    movq        %rsp,       %rdi

    callq       do_nmi

    jmp         RSETORE_ALL

ENTRY(int3)
    pushq       $0
    pushq       %rax
    leaq        do_int3(%rip),  %rax
    xchgq       %rax,           (%rsp)
    jmp         error_code

ENTRY(overflow)
    pushq       $0
    pushq       %rax
    leaq        do_overflow(%rip),  %rax
    xchgq       %rax,               (%rsp)
    jmp         error_code

ENTRY(bounds)
    pushq       $0
    pushq       %rax
    leaq        do_bounds(%rip),    %rax
    xchgq       %rax,               (%rsp)
    jmp         error_code

ENTRY(undefined_opcode)
    pushq       $0
    pushq       %rax
    leaq        do_undefined_opcode(%rip),  %rax
    xchgq       %rax,                       (%rsp)
    jmp         error_code

ENTRY(dev_not_available)    /* need rewrite */
    pushq       $0
    pushq       %rax
    leaq        do_dev_not_available(%rip), %rax
    xchgq       %rax,                       (%rsp)
    jmp         error_code


ENTRY(double_fault)
    pushq       %rax
    leaq        do_double_fault(%rip),  %rax
    xchgq       %rax,                   (%rsp)
    jmp         error_code

ENTRY(coprocessor_segment_overrun)
    pushq       $0
    pushq       %rax
    leaq        do_coprocessor_segment_overrun(%rip),   %rax
    xchgq       %rax,                                   (%rsp)
    jmp         error_code

ENTRY(invalid_TSS)
    pushq       %rax
    leaq        do_invalid_TSS(%rip),   %rax
    xchgq       %rax,                   (%rsp)
    jmp         error_code

ENTRY(segment_not_present)
    pushq       %rax
    leaq        do_segment_not_present(%rip),   %rax
    xchgq       %rax,                           (%rsp)
    jmp         error_code

ENTRY(stack_segment_fault)
    pushq       %rax
    leaq        do_stack_segment_fault(%rip),   %rax
    xchgq       %rax,                           (%rsp)
    jmp         error_code

ENTRY(general_protection)
    pushq       %rax
    leaq        do_general_protection(%rip),    %rax
    xchgq       %rax,                           (%rsp)
    jmp         error_code

ENTRY(page_fault)
    pushq       %rax
    leaq        do_page_fault(%rip),            %rax
    xchgq       %rax,                           (%rsp)
    jmp         error_code

ENTRY(x87_FPU_error)
    pushq       $0
    pushq       %rax
    leaq        do_x87_FPU_error(%rip),         %rax
    xchgq       %rax,                           (%rsp)
    jmp         error_code

ENTRY(alignment_check)
    pushq       %rax
    leaq        do_alignment_check(%rip),       %rax
    xchgq       %rax,                           (%rsp)
    jmp         error_code

ENTRY(machine_check)
    pushq       $0
    pushq       %rax
    leaq        do_machine_check(%rip),         %rax
    xchgq       %rax,                           (%rsp)
    jmp         error_code

ENTRY(SIMD_exception)
    pushq       $0
    pushq       %rax
    leaq        do_SIMD_exception(%rip),        %rax
    xchgq       %rax,                           (%rsp)
    jmp         error_code

ENTRY(virtualization_exception)
    pushq       $0
    pushq       %rax
    leaq        do_virtualization_exception(%rip),  %rax
    xchgq       %rax,                               (%rsp)
    jmp         error_code
